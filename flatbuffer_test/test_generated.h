// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

struct test;
struct testBuilder;

struct test FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef testBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_STR = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *str() const {
    return GetPointer<const flatbuffers::String *>(VT_STR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_STR) &&
           verifier.VerifyString(str()) &&
           verifier.EndTable();
  }
};

struct testBuilder {
  typedef test Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(test::VT_ID, id, 0);
  }
  void add_str(flatbuffers::Offset<flatbuffers::String> str) {
    fbb_.AddOffset(test::VT_STR, str);
  }
  explicit testBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<test>(end);
    return o;
  }
};

inline flatbuffers::Offset<test> Createtest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> str = 0) {
  testBuilder builder_(_fbb);
  builder_.add_str(str);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<test> CreatetestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *str = nullptr) {
  auto str__ = str ? _fbb.CreateString(str) : 0;
  return Createtest(
      _fbb,
      id,
      str__);
}

inline const test *Gettest(const void *buf) {
  return flatbuffers::GetRoot<test>(buf);
}

inline const test *GetSizePrefixedtest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<test>(buf);
}

inline bool VerifytestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test>(nullptr);
}

inline bool VerifySizePrefixedtestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test>(nullptr);
}

inline void FinishtestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
